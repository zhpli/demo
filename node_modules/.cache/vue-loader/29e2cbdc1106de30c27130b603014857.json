{"remainingRequest":"D:\\myGitProject\\vue-element-admin\\node_modules\\_vue-loader@15.7.2@vue-loader\\lib\\index.js??vue-loader-options!D:\\myGitProject\\vue-element-admin\\src\\views\\zip\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\myGitProject\\vue-element-admin\\src\\views\\zip\\index.vue","mtime":1573048025981},{"path":"D:\\myGitProject\\vue-element-admin\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myGitProject\\vue-element-admin\\node_modules\\_babel-loader@8.0.6@babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\myGitProject\\vue-element-admin\\node_modules\\_cache-loader@2.0.1@cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\myGitProject\\vue-element-admin\\node_modules\\_vue-loader@15.7.2@vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { fetchList } from '@/api/article'\r\n\r\nexport default {\r\n  name: 'ExportZip',\r\n  data() {\r\n    return {\r\n      list: null,\r\n      listLoading: true,\r\n      downloadLoading: false,\r\n      filename: ''\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchData()\r\n  },\r\n  methods: {\r\n    async fetchData() {\r\n      this.listLoading = true\r\n      const { data } = await fetchList()\r\n      this.list = data.items\r\n      this.listLoading = false\r\n    },\r\n    handleDownload() {\r\n      this.downloadLoading = true\r\n      import('@/vendor/Export2Zip').then(zip => {\r\n        const tHeader = ['Id', 'Title', 'Author', 'Readings', 'Date']\r\n        const filterVal = ['id', 'title', 'author', 'pageviews', 'display_time']\r\n        const list = this.list\r\n        const data = this.formatJson(filterVal, list)\r\n        zip.export_txt_to_zip(tHeader, data, this.filename, this.filename)\r\n        this.downloadLoading = false\r\n      })\r\n    },\r\n    formatJson(filterVal, jsonData) {\r\n      return jsonData.map(v => filterVal.map(j => v[j]))\r\n    }\r\n  }\r\n}\r\n",null]}